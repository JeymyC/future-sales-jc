{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "55f0ed2ac468f0eb59c24726ca0c9bdc8884c345"
   },
   "source": [
    "This notebook does exploratory data analysis and feature engineering. The results are dumped to file for modeling.\n",
    "\n",
    "#### Exploratary Data Analysis\n",
    "* load data\n",
    "* trend of sales\n",
    "* distribution of target\n",
    "\n",
    "#### Data Cleaning & Feature Engineering\n",
    "* heal data and remove outliers\n",
    "* work with shops/items/cats objects and features\n",
    "* expand training set to include all item-shop pairs\n",
    "* clip item_cnt_month by (0,20)\n",
    "* append test to the matrix, fill 34 month nans with zeros\n",
    "* merge shops/items/cats dataframe to training set.\n",
    "* add group sale stats in recent months\n",
    "* add lag features\n",
    "* add trend features\n",
    "* add month and year\n",
    "* add months since last sale/months since first sale features\n",
    "* cut first year and drop columns which can not be calculated for the test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "f03379ee467570732ebb2b3d20062fea0584d57d"
   },
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sys.version_info(major=3, minor=6, micro=5, releaselevel='final', serial=0)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_rows', 500)\n",
    "pd.set_option('display.max_columns', 100)\n",
    "\n",
    "from itertools import product\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import time\n",
    "import sys\n",
    "import gc\n",
    "import pickle\n",
    "sys.version_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_uuid": "f0a1c729d4fb3d6609f9dfb163ebe92fa9dc654c"
   },
   "outputs": [],
   "source": [
    "# load data\n",
    "items = pd.read_csv('../input/items.csv')\n",
    "shops = pd.read_csv('../input/shops.csv')\n",
    "cats = pd.read_csv('../input/item_categories.csv')\n",
    "train = pd.read_csv('../input/sales_train.csv')\n",
    "# set index to ID to avoid droping it later\n",
    "test  = pd.read_csv('../input/test.csv').set_index('ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>date_block_num</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_price</th>\n",
       "      <th>item_cnt_day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02.01.2013</td>\n",
       "      <td>0</td>\n",
       "      <td>59</td>\n",
       "      <td>22154</td>\n",
       "      <td>999.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>03.01.2013</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>2552</td>\n",
       "      <td>899.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>05.01.2013</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>2552</td>\n",
       "      <td>899.00</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>06.01.2013</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>2554</td>\n",
       "      <td>1709.05</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15.01.2013</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>2555</td>\n",
       "      <td>1099.00</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  date_block_num  shop_id  item_id  item_price  item_cnt_day\n",
       "0  02.01.2013               0       59    22154      999.00           1.0\n",
       "1  03.01.2013               0       25     2552      899.00           1.0\n",
       "2  05.01.2013               0       25     2552      899.00          -1.0\n",
       "3  06.01.2013               0       25     2554     1709.05           1.0\n",
       "4  15.01.2013               0       25     2555     1099.00           1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "4441f3aa0223a0c82dc0857668f2b66b51796617"
   },
   "source": [
    "Test set is a product of some shops and some items within 34 month. There are 5100 items * 42 shops = 214200 pairs. 363 items are new compared to the train. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_uuid": "bffdf025a7d56c073baae2be28dc020ea970c705"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train size, item in train, shop in train 2935849 21807 60\n",
      "train size, item in train, shop in train 214200 5100 42\n",
      "new items: 363 5100 214200\n"
     ]
    }
   ],
   "source": [
    "print('train size, item in train, shop in train', train.shape[0], train.item_id.nunique(), train.shop_id.nunique())\n",
    "print('train size, item in train, shop in train', test.shape[0], test.item_id.nunique(),test.shop_id.nunique())\n",
    "print('new items:', len(list(set(test.item_id) - set(test.item_id).intersection(set(train.item_id)))), len(list(set(test.item_id))), len(test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check for missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date              0\n",
       "date_block_num    0\n",
       "shop_id           0\n",
       "item_id           0\n",
       "item_price        0\n",
       "item_cnt_day      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "56159823a46bb6dad909a3e1e86c1b7eafd3c54e"
   },
   "source": [
    "There is no missing value in the training set.\n",
    "\n",
    "Plot the total sale of each month, we see a clear trend and seasonality. The overall sale is decreasing with time, and there are peaks in November."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_uuid": "8da35b420ce7058eeb91d44378317d233759436a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11520f320>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sale_by_month = train.groupby('date_block_num')['item_cnt_day'].sum()\n",
    "sale_by_month.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "eafc3711b504497b24f60e1fc1038b961e996ad4"
   },
   "source": [
    "The distribution of sale grouped by month, item and shop, we see most item-shop pairs have small monthly sale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "_uuid": "a8bc02e1ca222b8ce670cf53e3697bc7cb3d9566"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x114b06828>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "block_item_shop_sale = train.groupby(['date_block_num','item_id','shop_id'])['item_cnt_day'].sum()\n",
    "block_item_shop_sale.clip(0,20).plot.hist(bins=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "ed7a190645750a818e29a6291ba2553a91764c7c"
   },
   "source": [
    "\n",
    "# Feature engineering and data cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "425d8f2dc08378977b393bf80c5fdcf0fba2c992"
   },
   "source": [
    "#### remove outliers\n",
    "Remove outliers with very large item_cnt_day and item_price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "_uuid": "5a864412fafc3129a3e9bd5bb1f18a7cf0c62935"
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkwAAAELCAYAAAAr0dmKAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAEo1JREFUeJzt3X2QXeV9H/DvD0m2EXgMFgzYSWaEA8RShtqhxBNnkgxNwZE87bhJ3Y5bBslNbVraQhy7nrqWCNKYtmlqhxmYTCgkNKhhmthuPWTakWKRmgRDa1uyhcDxC7JDpmYwiHVwwK6oBE//2LOby6LdRyvtXr3s5zNzZ8899+zz8uPcy3fPOVenWmsBAGB2px3vAQAAnOgEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOpbPZ+NzzjmnrV69epGGAgCwcHbv3v10a+3chWhrXoFp9erV2bVr10L0CwCwqKrqzxeqLafkAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoGPsgenWW2/NrbfeOu5uAQCO2tgD044dO7Jjx45xdwsAcNSckgMA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOpaPu8Pvf//74+4SAOCYjD0wtdbG3SUAwDFxSg4AoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoEJgAADoEJgCADoEJAKBDYAIA6BCYAAA6BCYAgA6BCQCgQ2ACAOgQmAAAOgQmAIAOgQkAoENgAgDoWL7YHUxMTGTz5s05dOhQHn300en1l19++WJ3Pa2q0lpLklx99dXZvXt3Wmt5z3vekxtuuCFnnXVWvv3tb+eGG27Ixz/+8Rw4cCBPPvlkPvjBD+ajH/1otm7dmjvvvDOHDh3KsmXLctNNN2XVqlXT89u6dWs2bNiQG2+8MR/4wAfysY99LFu3bs22bdty4403Jkm2bt2aG2+8cfr3ZrNv375cf/31Oe+883L66afnIx/5SPd3Rscx1cc999yTm2++Oeeff37OPvvs6TFPTEzkhhtuSGvtJfM4UlP9XH/99bnlllteNqeZ4zjVLbX5wmLwPuJksGzLli1HvPHtt9++5ZprrplXB7fddlseeOCBfOc735nn0BbH3r17s3///jz99NN58MEH873vfS/PPvtsWmt54IEH8tRTT+WZZ57JwYMH88ADD+T555/Pgw8+mMcffzwTExN5+umn8/zzz+etb31rksn53X///dNtjf7Ot771rRw4cCB79uzJ/fffnwMHDkz/3mze//73Z//+/XnmmWeyf//+l/Q1l6lxTPVx7bXXJkmee+65l4z5tttuy2c/+9mXzeNITfWzd+/efP3rX3/ZnGaO41S31OYLi8H7iMWydevWJ7Zs2XL7QrS1qKfkJiYmsn379sXs4pg899xzL3l+6NChwz6fud327dszMTGRiYmJ7NixI6216W1Gf6e1lu3bt09vs2PHjkxMTMw6nn379uWxxx47bF9zGR3Hjh07cvfdd08fURttZ9++fdmxY8e82p6tn8cee+xlc5o5jvm0fTJaavOFxeB9xMliUQPTXXfd9bIQcio4ePBgtm3blrvuuisvvvhid9uDBw8mSV544YVs27Zt1m1vuummWfuay+g4Xnjhhdxxxx2Hbeemm26aHsuRtj1bP1NG5zRzHPNp+2S01OYLi8H7iJNFNzBV1TVVtauqdu3fv39ejd97770vO9JxKmitZefOnbn33nu7gbC1Nl2DQ4cOZefOnbNuO/Po0mhfcxkdx2zjGT0qNJ+2Z+tnyuicZo5jPm2fjJbafGExeB9xsugGptba7a21y1prl5177rnzavyKK65IVR314E5UVZUrr7wyV1xxRZYvn/u6+aqarsHy5ctz5ZVXzrrt6tWrZ+1rLqPjmG08VZXVq1e/5L/HkbQ9Wz9TRuc0cxzz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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkMAAAELCAYAAADa2oIHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAD75JREFUeJzt3X2MZWV9B/Dvjx1cG0TlLcaq6aijsVbE4tZoYg20gKsxwYKmpiSspQnWtohN/IOGTZFkSexrCispWa1xaZr6Bo2mScFFSZu0UVwssFCDDHTbaqzoUt9Iii48/eOeoXfXnZl7l7uz7DyfT3Iz5z7nPPc897fnzvnuOefOqdZaAAB6ddzRHgAAwNEkDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALo2N83Cp556apufnz9CQwEAmJ0777zzu62101ZbbqowND8/n927dx/+qAAA1khV/cckyzlNBgB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXZsqDD344IPZvn37kRoLAMCamyoM7d+/P4uLi0dqLAAAa85pMgCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANA1YQgA6JowBAB0TRgCALomDAEAXROGAICuCUMAQNeEIQCga8IQANC1wwpD27dvz/bt22c9FgCANTd3OJ0WFxdnPQ4AgKPCaTIAoGvCEADQNWEIAOiaMAQAdE0YAgC6JgwBAF0ThgCArglDAEDXhCEAoGvCEADQNWEIAOiaMAQAdE0YAgC6JgwBAF0ThgCArglDAEDXhCEAoGvCEADQNWEIAOiaMAQAdE0YAgC6JgwBAF0ThgCArglDAEDXhCEAoGvCEADQNWEIAOiaMAQAdE0YAgC6JgwBAF0ThgCArglDAEDXhCEAoGvC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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,4))\n",
    "plt.xlim(-100, 3000)\n",
    "sns.boxplot(x=train.item_cnt_day)\n",
    "\n",
    "plt.figure(figsize=(10,4))\n",
    "plt.xlim(train.item_price.min(), train.item_price.max()*1.1)\n",
    "sns.boxplot(x=train.item_price)\n",
    "\n",
    "train = train[train.item_price<100000]\n",
    "train = train[train.item_cnt_day<1001]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "d2f99368478e3063b1c379537944e954d7186928"
   },
   "source": [
    "There is one item with price below zero. Fill it with median."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "_uuid": "0fc6b90b22fe232f4240ac8f965cc52b3db5526a"
   },
   "outputs": [],
   "source": [
    "median = train[(train.shop_id==32)&(train.item_id==2973)&(train.date_block_num==4)&(train.item_price>0)].item_price.median()\n",
    "train.loc[train.item_price<0, 'item_price'] = median"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "7da194c285d696b5c6978148bf0143b9b2a7b0c5"
   },
   "source": [
    "Several shops are duplicates of each other (according to its name). Fix train and test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "_uuid": "00fe91e9c482ea413abd774ff903fe3d152785dd"
   },
   "outputs": [],
   "source": [
    "# Якутск Орджоникидзе, 56\n",
    "train.loc[train.shop_id == 0, 'shop_id'] = 57\n",
    "test.loc[test.shop_id == 0, 'shop_id'] = 57\n",
    "# Якутск ТЦ \"Центральный\"\n",
    "train.loc[train.shop_id == 1, 'shop_id'] = 58\n",
    "test.loc[test.shop_id == 1, 'shop_id'] = 58\n",
    "# Жуковский ул. Чкалова 39м²\n",
    "train.loc[train.shop_id == 10, 'shop_id'] = 11\n",
    "test.loc[test.shop_id == 10, 'shop_id'] = 11"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "a30f0521464e1fa20444e66d24bbdcb76b93f6de"
   },
   "source": [
    "#### Shops/Cats/Items preprocessing\n",
    "Observations:\n",
    "* Each shop_name starts with the city name.\n",
    "* Each category contains type and subtype in its name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "_uuid": "12fae4c8d0c8f3e817307d1e0ffc6831e9a8d696"
   },
   "outputs": [],
   "source": [
    "shops.loc[shops.shop_name == 'Сергиев Посад ТЦ \"7Я\"', 'shop_name'] = 'СергиевПосад ТЦ \"7Я\"'\n",
    "shops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\n",
    "shops.loc[shops.city == '!Якутск', 'city'] = 'Якутск'\n",
    "shops['city_code'] = LabelEncoder().fit_transform(shops['city'])\n",
    "shops = shops[['shop_id','city_code']]\n",
    "\n",
    "cats['split'] = cats['item_category_name'].str.split('-')\n",
    "cats['type'] = cats['split'].map(lambda x: x[0].strip())\n",
    "cats['type_code'] = LabelEncoder().fit_transform(cats['type'])\n",
    "# if subtype is nan then type\n",
    "cats['subtype'] = cats['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\n",
    "cats['subtype_code'] = LabelEncoder().fit_transform(cats['subtype'])\n",
    "cats = cats[['item_category_id','type_code', 'subtype_code']]\n",
    "\n",
    "items.drop(['item_name'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "62c5f83fa222595da99294f465ab28e80ce415e9"
   },
   "source": [
    "## Monthly sales\n",
    "Most of the items in the test set target value should be zero, while train set contains only pairs which were sold or returned in the past. So we expand the train set to include those item-shop pairs with zero monthly sales. This way train data will be similar to test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "_uuid": "7626c7455ea71b65894c6c866519df15080fa2ac"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22.03199529647827"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = []\n",
    "cols = ['date_block_num','shop_id','item_id']\n",
    "for i in range(34):\n",
    "    sales = train[train.date_block_num==i]\n",
    "    matrix.append(np.array(list(product([i], sales.shop_id.unique(), sales.item_id.unique())), dtype='int16'))\n",
    "    \n",
    "matrix = pd.DataFrame(np.vstack(matrix), columns=cols)\n",
    "matrix['date_block_num'] = matrix['date_block_num'].astype(np.int8)\n",
    "matrix['shop_id'] = matrix['shop_id'].astype(np.int8)\n",
    "matrix['item_id'] = matrix['item_id'].astype(np.int16)\n",
    "matrix.sort_values(cols,inplace=True)\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "867e91a7570dd78b4834f4f1a166e58f80b63f93"
   },
   "source": [
    "Aggregate train set by shop/item pairs to calculate target aggreagates, then <b>clip(0,20)</b> target value. This way train target will be similar to the test predictions.\n",
    "\n",
    "Downcast item_cnt_month to float32 -- float16 was too small to perform sum operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "_uuid": "9fef5477060be7d2e6c85dcb79d8e18e6253f7dd"
   },
   "outputs": [],
   "source": [
    "train['revenue'] = train['item_price'] *  train['item_cnt_day']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "_uuid": "7dd27181918fc7df89676e24d72130d183929d2d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.139244794845581"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "group = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\n",
    "group.columns = ['item_cnt_month']\n",
    "group.reset_index(inplace=True)\n",
    "\n",
    "matrix = pd.merge(matrix, group, on=cols, how='left')\n",
    "matrix['item_cnt_month'] = (matrix['item_cnt_month']\n",
    "                                .fillna(0)\n",
    "                                .clip(0,20) # NB clip target here\n",
    "                                .astype(np.float32))\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "315bc6107a93f3926a64fd09ea9244e9281ee41f"
   },
   "source": [
    "## Test set\n",
    "To use time tricks append test pairs to the matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "_uuid": "29d02bdb4fa768577607bf735b918ca81da85d41"
   },
   "outputs": [],
   "source": [
    "test['date_block_num'] = 34\n",
    "test['date_block_num'] = test['date_block_num'].astype(np.int8)\n",
    "test['shop_id'] = test['shop_id'].astype(np.int8)\n",
    "test['item_id'] = test['item_id'].astype(np.int16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "_uuid": "177fbbab94c8057d67d61357d29581248468a74d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.13201689720153809"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = pd.concat([matrix, test], ignore_index=True, sort=False, keys=cols)\n",
    "matrix.fillna(0, inplace=True) # 34 month\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "233e394a6cebf36ef002dc76fef8d430026a52b3"
   },
   "source": [
    "## Shops/Items/Cats features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "_uuid": "7dfd5df3e2bcaee4c312f3979736f52c40f2560f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.840725183486938"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = pd.merge(matrix, shops, on=['shop_id'], how='left')\n",
    "matrix = pd.merge(matrix, items, on=['item_id'], how='left')\n",
    "matrix = pd.merge(matrix, cats, on=['item_category_id'], how='left')\n",
    "matrix['city_code'] = matrix['city_code'].astype(np.int8)\n",
    "matrix['item_category_id'] = matrix['item_category_id'].astype(np.int8)\n",
    "matrix['type_code'] = matrix['type_code'].astype(np.int8)\n",
    "matrix['subtype_code'] = matrix['subtype_code'].astype(np.int8)\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "8358b291fdc8e0e7d1b5700974803b3f104715f7"
   },
   "source": [
    "## Traget lags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "_uuid": "9cd7bcc7643ce4545475e8e6f80d09a979aac42d"
   },
   "outputs": [],
   "source": [
    "def lag_feature(df, lags, col):\n",
    "    tmp = df[['date_block_num','shop_id','item_id',col]]\n",
    "    for i in lags:\n",
    "        shifted = tmp.copy()\n",
    "        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n",
    "        shifted['date_block_num'] += i\n",
    "        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "_uuid": "78bf7ece93ebc4629ad0e48cd6a9927788d8706d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "57.156983852386475"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = lag_feature(matrix, [1,2,3,6,12], 'item_cnt_month')\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "9623850fd14c1a67cb8d68f536b32d974729032b"
   },
   "source": [
    "## Group sale stats in recent\n",
    "create stats (mean/var) of sales of certain groups during the past 12 months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "_uuid": "46eb3502a9c5cc2dbd179613f09cc587d17128f5"
   },
   "outputs": [],
   "source": [
    "def add_group_stats(matrix_, groupby_feats, target, enc_feat, last_periods):\n",
    "    if not 'date_block_num' in groupby_feats:\n",
    "        print ('date_block_num must in groupby_feats')\n",
    "        return matrix_\n",
    "    \n",
    "    group = matrix_.groupby(groupby_feats)[target].sum().reset_index()\n",
    "    max_lags = np.max(last_periods)\n",
    "    for i in range(1,max_lags+1):\n",
    "        shifted = group[groupby_feats+[target]].copy(deep=True)\n",
    "        shifted['date_block_num'] += i\n",
    "        shifted.rename({target:target+'_lag_'+str(i)},axis=1,inplace=True)\n",
    "        group = group.merge(shifted, on=groupby_feats, how='left')\n",
    "    group.fillna(0,inplace=True)\n",
    "    for period in last_periods:\n",
    "        lag_feats = [target+'_lag_'+str(lag) for lag in np.arange(1,period+1)]\n",
    "        # we do not use mean and svd directly because we want to include months with sales = 0\n",
    "        mean = group[lag_feats].sum(axis=1)/float(period)\n",
    "        mean2 = (group[lag_feats]**2).sum(axis=1)/float(period)\n",
    "        group[enc_feat+'_avg_sale_last_'+str(period)] = mean\n",
    "        group[enc_feat+'_std_sale_last_'+str(period)] = (mean2 - mean**2).apply(np.sqrt)\n",
    "        group[enc_feat+'_std_sale_last_'+str(period)].replace(np.inf,0,inplace=True)\n",
    "        # divide by mean, this scales the features for NN\n",
    "        group[enc_feat+'_avg_sale_last_'+str(period)] /= group[enc_feat+'_avg_sale_last_'+str(period)].mean()\n",
    "        group[enc_feat+'_std_sale_last_'+str(period)] /= group[enc_feat+'_std_sale_last_'+str(period)].mean()\n",
    "    cols = groupby_feats + [f_ for f_ in group.columns.values if f_.find('_sale_last_')>=0]\n",
    "    matrix = matrix_.merge(group[cols], on=groupby_feats, how='left')\n",
    "    return matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "_uuid": "041621b2e2e5d28f91bfc6ef58dea9b0a65a08d9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47.83439517021179"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'item_id'], 'item_cnt_month', 'item', [6,12])\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'shop_id'], 'item_cnt_month', 'shop', [6,12])\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'item_category_id'], 'item_cnt_month', 'category', [12])\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'city_code'], 'item_cnt_month', 'city', [12])\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'type_code'], 'item_cnt_month', 'type', [12])\n",
    "matrix = add_group_stats(matrix, ['date_block_num', 'subtype_code'], 'item_cnt_month', 'subtype', [12])\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "c67bf4dbcef884ffe9d19c65d37bc4de1f287ef6"
   },
   "source": [
    "## Lag features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "_uuid": "79c8e250e42eaabddc4bc6c6569e70e1a23e2cfe"
   },
   "outputs": [],
   "source": [
    "#first use target encoding each group, then shift month to creat lag features\n",
    "def target_encoding(matrix_, groupby_feats, target, enc_feat, lags):\n",
    "    print ('target encoding for',groupby_feats)\n",
    "    group = matrix_.groupby(groupby_feats).agg({target:'mean'})\n",
    "    group.columns = [enc_feat]\n",
    "    group.reset_index(inplace=True)\n",
    "    matrix = matrix_.merge(group, on=groupby_feats, how='left')\n",
    "    matrix[enc_feat] = matrix[enc_feat].astype(np.float16)\n",
    "    matrix = lag_feature(matrix, lags, enc_feat)\n",
    "    matrix.drop(enc_feat, axis=1, inplace=True)\n",
    "    return matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "_uuid": "56d7d2b826231476ce450e90a9c8d9e68ed471e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "target encoding for ['date_block_num']\n",
      "target encoding for ['date_block_num', 'item_id']\n",
      "target encoding for ['date_block_num', 'shop_id']\n",
      "target encoding for ['date_block_num', 'item_category_id']\n",
      "target encoding for ['date_block_num', 'shop_id', 'item_category_id']\n",
      "target encoding for ['date_block_num', 'city_code']\n",
      "target encoding for ['date_block_num', 'item_id', 'city_code']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "364.96734499931335"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "matrix = target_encoding(matrix, ['date_block_num'], 'item_cnt_month', 'date_avg_item_cnt', [1])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'item_id'], 'item_cnt_month', 'date_item_avg_item_cnt', [1,2,3,6,12])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'shop_id'], 'item_cnt_month', 'date_shop_avg_item_cnt', [1,2,3,6,12])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'item_category_id'], 'item_cnt_month', 'date_cat_avg_item_cnt', [1])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'shop_id', 'item_category_id'], 'item_cnt_month', 'date_shop_cat_avg_item_cnt', [1])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'city_code'], 'item_cnt_month', 'date_city_avg_item_cnt', [1])\n",
    "matrix = target_encoding(matrix, ['date_block_num', 'item_id', 'city_code'], 'item_cnt_month', 'date_item_city_avg_item_cnt', [1])\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "6bcea31d93ab035ca3fa1ed7c0afddbf602c414a"
   },
   "source": [
    "## Trend features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "0504e9613087237c255914d9ebd165fac4e88cd0"
   },
   "source": [
    "Price trend for the last six months."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "_uuid": "0da2ded8502e273137991fd2bebbadaf19c19622"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1020.9743769168854"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "group = train.groupby(['item_id']).agg({'item_price': ['mean']})\n",
    "group.columns = ['item_avg_item_price']\n",
    "group.reset_index(inplace=True)\n",
    "\n",
    "matrix = pd.merge(matrix, group, on=['item_id'], how='left')\n",
    "matrix['item_avg_item_price'] = matrix['item_avg_item_price'].astype(np.float16)\n",
    "\n",
    "group = train.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\n",
    "group.columns = ['date_item_avg_item_price']\n",
    "group.reset_index(inplace=True)\n",
    "\n",
    "matrix = pd.merge(matrix, group, on=['date_block_num','item_id'], how='left')\n",
    "matrix['date_item_avg_item_price'] = matrix['date_item_avg_item_price'].astype(np.float16)\n",
    "\n",
    "lags = [1,2,3,4,5,6]\n",
    "matrix = lag_feature(matrix, lags, 'date_item_avg_item_price')\n",
    "\n",
    "for i in lags:\n",
    "    matrix['delta_price_lag_'+str(i)] = \\\n",
    "        (matrix['date_item_avg_item_price_lag_'+str(i)] - matrix['item_avg_item_price']) / matrix['item_avg_item_price']\n",
    "\n",
    "def select_trend(row):\n",
    "    for i in lags:\n",
    "        if row['delta_price_lag_'+str(i)]:\n",
    "            return row['delta_price_lag_'+str(i)]\n",
    "    return 0\n",
    "    \n",
    "matrix['delta_price_lag'] = matrix.apply(select_trend, axis=1)\n",
    "matrix['delta_price_lag'] = matrix['delta_price_lag'].astype(np.float16)\n",
    "matrix['delta_price_lag'].fillna(0, inplace=True)\n",
    "\n",
    "# https://stackoverflow.com/questions/31828240/first-non-null-value-per-row-from-a-list-of-pandas-columns/31828559\n",
    "# matrix['price_trend'] = matrix[['delta_price_lag_1','delta_price_lag_2','delta_price_lag_3']].bfill(axis=1).iloc[:, 0]\n",
    "# Invalid dtype for backfill_2d [float16]\n",
    "\n",
    "fetures_to_drop = ['item_avg_item_price', 'date_item_avg_item_price']\n",
    "for i in lags:\n",
    "    fetures_to_drop += ['date_item_avg_item_price_lag_'+str(i)]\n",
    "    fetures_to_drop += ['delta_price_lag_'+str(i)]\n",
    "\n",
    "matrix.drop(fetures_to_drop, axis=1, inplace=True)\n",
    "\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "17765ddb48f52abd88847a42c0a3ffe974e5b121"
   },
   "source": [
    "Last month shop revenue trend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "_uuid": "e633be47f1a22b41487866ce67fb874bd296339e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46.27099084854126"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ts = time.time()\n",
    "group = train.groupby(['date_block_num','shop_id']).agg({'revenue': ['sum']})\n",
    "group.columns = ['date_shop_revenue']\n",
    "group.reset_index(inplace=True)\n",
    "\n",
    "matrix = pd.merge(matrix, group, on=['date_block_num','shop_id'], how='left')\n",
    "matrix['date_shop_revenue'] = matrix['date_shop_revenue'].astype(np.float32)\n",
    "\n",
    "group = group.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\n",
    "group.columns = ['shop_avg_revenue']\n",
    "group.reset_index(inplace=True)\n",
    "\n",
    "matrix = pd.merge(matrix, group, on=['shop_id'], how='left')\n",
    "matrix['shop_avg_revenue'] = matrix['shop_avg_revenue'].astype(np.float32)\n",
    "\n",
    "matrix['delta_revenue'] = (matrix['date_shop_revenue'] - matrix['shop_avg_revenue']) / matrix['shop_avg_revenue']\n",
    "matrix['delta_revenue'] = matrix['delta_revenue'].astype(np.float16)\n",
    "\n",
    "matrix = lag_feature(matrix, [1], 'delta_revenue')\n",
    "\n",
    "matrix.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_uuid": "47e06af411b7d26cd93dad3d6735e48e5fbdee50"
   },
   "source": [
    "## Add month and year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "_uuid": "bb521e1f33d4124a3b90b47447bdb29150770b6e"
   },
   "outputs": [],
   "source": [
    "matrix['month'] = matrix['date_block_num'] % 12\n",
    "matrix['year'] = (matrix['date_block_num'] / 12).astype(np.int8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add month since the last and first sale\n",
    "The code has been simplified to reduce run time, though still may not be optimal -- ideally we don't need to compute max for each month."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "_uuid": "3458a7056c963167760921417d1f863f074f2b39"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "46.28129267692566"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Month since last sale for each shop/item pair.\n",
    "ts = time.time()\n",
    "last_sale = pd.DataFrame()\n",
    "for month in range(1,35):    \n",
    "    last_month = matrix.loc[(matrix['date_block_num']<month)&(matrix['item_cnt_month']>0)].groupby(['item_id','shop_id'])['date_block_num'].max()\n",
    "    df = pd.DataFrame({'date_block_num':np.ones([last_month.shape[0],])*month,\n",
    "                       'item_id': last_month.index.get_level_values(0).values,\n",
    "                       'shop_id': last_month.index.get_level_values(1).values,\n",
    "                       'item_shop_last_sale': last_month.values})\n",
    "    last_sale = last_sale.append(df)\n",
    "last_sale['date_block_num'] = last_sale['date_block_num'].astype(np.int8)\n",
    "\n",
    "matrix = matrix.merge(last_sale, on=['date_block_num','item_id','shop_id'], how='left')\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28.7638521194458"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Month since last sale for each item.\n",
    "ts = time.time()\n",
    "last_sale = pd.DataFrame()\n",
    "for month in range(1,35):    \n",
    "    last_month = matrix.loc[(matrix['date_block_num']<month)&(matrix['item_cnt_month']>0)].groupby('item_id')['date_block_num'].max()\n",
    "    df = pd.DataFrame({'date_block_num':np.ones([last_month.shape[0],])*month,\n",
    "                       'item_id': last_month.index.values,\n",
    "                       'item_last_sale': last_month.values})\n",
    "    last_sale = last_sale.append(df)\n",
    "last_sale['date_block_num'] = last_sale['date_block_num'].astype(np.int8)\n",
    "\n",
    "matrix = matrix.merge(last_sale, on=['date_block_num','item_id'], how='left')\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "_uuid": "ad0869709bbada35726d5ca41dd913d817249f8e"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.4374330043792725"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Months since the first sale for each shop/item pair and for item only.\n",
    "ts = time.time()\n",
    "matrix['item_shop_first_sale'] = matrix['date_block_num'] - matrix.groupby(['item_id','shop_id'])['date_block_num'].transform('min')\n",
    "matrix['item_first_sale'] = matrix['date_block_num'] - matrix.groupby('item_id')['date_block_num'].transform('min')\n",
    "time.time() - ts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Final preparations\n",
    "Because of the using 12 as lag value drop first 12 months. Also drop all the columns with this month calculated values (other words which can not be calcucated for the test set).\n",
    "Lightgbm and XGBboost can deal with missing values, so we will leave the NaNs as it is. Later for neural network, we will fill na with 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date_block_num', 'shop_id', 'item_id', 'item_cnt_month', 'city_code',\n",
       "       'item_category_id', 'type_code', 'subtype_code', 'item_cnt_month_lag_1',\n",
       "       'item_cnt_month_lag_2', 'item_cnt_month_lag_3', 'item_cnt_month_lag_6',\n",
       "       'item_cnt_month_lag_12', 'item_avg_sale_last_6', 'item_std_sale_last_6',\n",
       "       'item_avg_sale_last_12', 'item_std_sale_last_12',\n",
       "       'shop_avg_sale_last_6', 'shop_std_sale_last_6', 'shop_avg_sale_last_12',\n",
       "       'shop_std_sale_last_12', 'category_avg_sale_last_12',\n",
       "       'category_std_sale_last_12', 'city_avg_sale_last_12',\n",
       "       'city_std_sale_last_12', 'type_avg_sale_last_12',\n",
       "       'type_std_sale_last_12', 'subtype_avg_sale_last_12',\n",
       "       'subtype_std_sale_last_12', 'date_avg_item_cnt_lag_1',\n",
       "       'date_item_avg_item_cnt_lag_1', 'date_item_avg_item_cnt_lag_2',\n",
       "       'date_item_avg_item_cnt_lag_3', 'date_item_avg_item_cnt_lag_6',\n",
       "       'date_item_avg_item_cnt_lag_12', 'date_shop_avg_item_cnt_lag_1',\n",
       "       'date_shop_avg_item_cnt_lag_2', 'date_shop_avg_item_cnt_lag_3',\n",
       "       'date_shop_avg_item_cnt_lag_6', 'date_shop_avg_item_cnt_lag_12',\n",
       "       'date_cat_avg_item_cnt_lag_1', 'date_shop_cat_avg_item_cnt_lag_1',\n",
       "       'date_city_avg_item_cnt_lag_1', 'date_item_city_avg_item_cnt_lag_1',\n",
       "       'delta_price_lag', 'delta_revenue_lag_1', 'month', 'year',\n",
       "       'item_shop_last_sale', 'item_last_sale', 'item_shop_first_sale',\n",
       "       'item_first_sale'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix = matrix[matrix.date_block_num > 11]\n",
    "matrix.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix.to_pickle('../output/data.pkl')\n",
    "del matrix\n",
    "del group\n",
    "del items\n",
    "del shops\n",
    "del cats\n",
    "del train\n",
    "# leave test for submission\n",
    "gc.collect();"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
